prototype(Neos.DocsNeosIo:Component.Sidebar.LevelRenderer) < prototype(Neos.Fusion:Component) {
    @context.nodeDepth = ${Neos.Node.depth(this.node) - Neos.Node.depth(startingPoint)}
    node = ${node}
    itemTitle = ${q(node).property('mainMenuTitle') || q(node).property('titleOverride') || q(node).property('title')}
    itemStatus = ${q(node).property('status')}
    itemTarget = ${q(node).property('target')}
    parentOfDocumentNode = ${q(documentNode).parent().get(0)}
    isDocumentNode = ${node.aggregateId.value == documentNode.aggregateId.value}
    navigationClass = "sidebar-links"
    navigationItems = Neos.Fusion:Loop {
        @if.notEmpty = ${this.items.count() > 0}
        items = ${q(node).children('[instanceof Neos.Neos:Document][hiddenInMenu != TRUE][hideFromMainMenu != TRUE]')}
        itemName = 'node'
        itemRenderer = Neos.DocsNeosIo:Component.Sidebar.LevelRenderer
    }

    @private {
        itemLinkClass = Neos.Fusion:DataStructure {
            base = 'sidebar-link-item'
            current = 'current'
            current.@if.isCurrent = ${props.isDocumentNode}
            active = 'active'
            active.@if.isActive = ${props.isDocumentNode || String.indexOf(props.itemTarget, documentNode.aggregateId) > -1}
        }
        renderNextLevel = ${nodeDepth < 2 || (props.isDocumentNode || props.parentOfDocumentNode.aggregateId.value == node.aggregateId.value) && props.navigationItems}
    }

    renderer = afx`
        <li class="sidebar-link" >
            <Carbon.Link:Link title={props.itemTitle} node={node} additionalClass={private.itemLinkClass} backendLink={true}>
                {props.itemTitle}
                <Neos.DocsNeosIo:Component.Badge @if={props.itemStatus} itemStatus={props.itemStatus} />
            </Carbon.Link:Link>
            <ul @if.hasNextLevel={private.renderNextLevel} class={props.navigationClass}>
                {props.navigationItems}
            </ul>
        </li>
    `
}
